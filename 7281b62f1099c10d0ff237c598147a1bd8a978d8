{
  "comments": [
    {
      "key": {
        "uuid": "fa81d914_31b00043",
        "filename": "app/components/clusters/cluster-new.ts",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 1006048
      },
      "writtenOn": "2016-02-02T13:34:07Z",
      "side": 1,
      "message": "subnets[i] !\u003d\u003d subnets[i] \u0026\u0026 network !\u003d\u003d network\n\nThis will always result to false.\n\nWhy do we need to have this condition in place?",
      "range": {
        "startLine": 162,
        "startChar": 25,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "7281b62f1099c10d0ff237c598147a1bd8a978d8",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_799b3e72",
        "filename": "app/components/clusters/cluster-new.ts",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 1007322
      },
      "writtenOn": "2016-02-08T12:28:37Z",
      "side": 1,
      "message": "No this won\u0027t always result in false.\n\nThis is to avoid corner-case of validating against NaN. Theoretically NaN !\u003d\u003d NaN.\n\nAll the array prototypes like contains/includes in different libraries (and in ES6) are implemented keeping this in mind.\n\nIf curious, you can check out the main algorithm in the spec draft: https://tc39.github.io/ecma262/#sec-array.prototype.includes\n\nand a demo implementation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\n\nHope this explains.",
      "parentUuid": "fa81d914_31b00043",
      "range": {
        "startLine": 162,
        "startChar": 25,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "7281b62f1099c10d0ff237c598147a1bd8a978d8",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_c1b8a1ca",
        "filename": "app/components/clusters/cluster-new.ts",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 1006048
      },
      "writtenOn": "2016-02-08T12:45:28Z",
      "side": 1,
      "message": "Agree with it.\n\nNaN is a \u0027number\u0027 whose value is NaN. So the comparison make sense if we iterating through a number array which might have NaN.\n\nIn the current code context, \u0027network\u0027 is a string.\n\nSo the comparisons valid and make sense, but not required in this context.\n\nBtw, subnets array is populated by us, so there is no way NaN get through because of \u0027network !\u003d\u003d network\u0027",
      "parentUuid": "fa81d914_799b3e72",
      "range": {
        "startLine": 162,
        "startChar": 25,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "7281b62f1099c10d0ff237c598147a1bd8a978d8",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}